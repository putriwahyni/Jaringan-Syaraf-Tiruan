# -*- coding: utf-8 -*-
"""Putri dari JST - RNN - Kelompok

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Vq5LKP6b7hi2Lh2aToX9-9psdzixv7SQ

# Create Data
"""

from google.colab import drive
drive.mount("/content/gdrive")

import pandas as pd

train_data = pd.read_csv('/content/gdrive/MyDrive/JST/RNN/train.csv')
test_data = pd.read_csv('/content/gdrive/MyDrive/JST/RNN/Test_Jan.csv')
y_test = pd.read_csv('/content/gdrive/MyDrive/JST/RNN/Predict_Jan.csv')

test_data = test_data.drop(["nat_demand"], axis = 1)
test_data = test_data.join(y_test.set_index("datetime"), on = "datetime")

import numpy as np

x_train = train_data.drop(["nat_demand", "datetime"], axis = 1).copy()
Y_train = train_data["nat_demand"].astype(np.float32).copy()

x_test = test_data.drop(["nat_demand","datetime"], axis=1).copy()
Y_test = test_data["nat_demand"].astype(np.float32).copy()

train_data

import matplotlib.pyplot as plt

# # Data

# plt.plot(train_data["nat_demand"].iloc[:500])
# plt.show()

"""# Preprocessing Data"""

import tensorflow as tf

tf.random.set_seed(7)

from sklearn.preprocessing import MinMaxScaler, StandardScaler

scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.fit_transform(x_test)

# Reshape into [samples, time_steps, features]
x_train = np.reshape(x_train, (x_train.shape[0], 1, x_train.shape[1]))
x_test = np.reshape(x_test, (x_test.shape[0], 1, x_test.shape[1]))

a = tf.data.Dataset.from_tensor_slices(tf.constant(x_train))
b = tf.data.Dataset.from_tensor_slices(tf.constant(Y_train))
train_data = tf.data.Dataset.zip((a,b))

a

b

x_train.shape

"""# Eksperimen"""

epoch = 200
batch_size = 32
learning_rate = 0.0005

"""# Create Model"""

from keras.models import Sequential
from keras import layers
from keras.optimizers import Adam, RMSprop
from keras.losses import MeanSquaredError

model = Sequential()

# For 6 Layer
model.add(layers.LSTM(units=128, activation='relu', return_sequences=True, input_shape = (x_train.shape[1],x_train.shape[2])))
model.add(layers.LSTM(units=128, activation="relu", return_sequences=True))
model.add(layers.LSTM(units=64, activation="relu", return_sequences=True))
model.add(layers.Dense(units=64, activation="relu"))
model.add(layers.Dense(units=10, activation="relu"))
model.add(layers.Dense(units=1))

# For 3 Layer
# model.add(layers.LSTM(units=128, activation='linear', return_sequences=True, input_shape = (x_train.shape[1],x_train.shape[2])))
# model.add(layers.LSTM(units=64, activation="linear", return_sequences=True))
# model.add(layers.Dense(units=1))

# Prediction of the next value
model.compile(loss=MeanSquaredError(), optimizer=Adam(learning_rate= learning_rate))

model.summary()

model.fit(x_test,Y_test,epochs = epoch, batch_size = batch_size)

y_pred = model.predict(x_test)
y_pred = y_pred.squeeze()

Y_test.to_numpy().shape

plt.plot(Y_test, label="actual")
plt.plot(y_pred, label="predicted")
plt.legend()
plt.show()